#!/usr/bin/env python

import subprocess
import os

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
SKIP_FOLDERS = [
    './Modules',
    './out',
    # './Template',
]
CONTENTS_TEMPLATE = """\
# Contents
*This file acts as a table of contents page for the generated PDFs.*

## Table of Contents
"""

def get_tex_files():
    tex_files = []
    for root, dirs, files in os.walk("."):
        if root in SKIP_FOLDERS:
            continue

        for file in files:
            if file.endswith(".tex"):
                tex_files.append(os.path.join(root, file))
    return tex_files

def generate_tex():
    tex_files = get_tex_files()
    for tex_file in tex_files:
        subprocess.run(["latexmk", "-pdf", "-lualatex", "-cd", tex_file])

def collect_pdfs():
    pdfs = []
    for root, dirs, files in os.walk("."):
        if root in SKIP_FOLDERS:
            continue

        for file in files:
            if file.endswith(".pdf"):
                pdfs.append(os.path.join(root, file))
    return pdfs

def generate_readme(pdfs: list[str]):
    lines = [CONTENTS_TEMPLATE]
    dir_to_pdfs = {}

    for pdf in pdfs:
        dirname = os.path.basename(os.path.dirname(pdf))
        basename = os.path.basename(pdf)
        if dirname not in dir_to_pdfs:
            dir_to_pdfs[dirname] = []
        dir_to_pdfs[dirname].append(basename)

    for directory, files in sorted(dir_to_pdfs.items()):
        lines.append(f"- [{directory}]({directory.replace(' ', '%20')})")
        for file in sorted(files):
            relative_path = os.path.relpath(os.path.join(directory, file), ROOT_DIR)
            lines.append(f"    - [{file}]({relative_path.replace(' ', '%20')})")

    with open(os.path.join(ROOT_DIR, "CONTENTS.md"), "w") as f:
        f.write("\n".join(lines))

generate_tex()
pdfs = collect_pdfs()
generate_readme(pdfs)

for pdf in pdfs:
    print(pdf)
